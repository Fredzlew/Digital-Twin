# import the builtin time module
import time
def cal_fact(n):
    if n == 1:
        return n
    else:
        return n * cal_fact(n-1)
# Grab Currrent Time Before Running the Code
start = time.time()
# Import modules
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import signal
import matplotlib.pyplot as plt
import PyOMA as oma
from matplotlib.backend_bases import MouseButton
from os.path import dirname, join as pjoin
import scipy.io as sio

%matplotlib qt

# ======== PRE-PROCESSING =====================================================


#Finding the file
data_dir = pjoin(dirname(sio.__file__), r"C:\Users\Frede\OneDrive - Danmarks Tekniske Universitet\Speciale\Digital-Twin\src\data\simulated_data")



data_sim = pjoin(data_dir, '1_sim_data.mat')

# Loading simulated data instead:
data = sio.loadmat(data_sim)
data = np.transpose(data["x"])


# Sampling frequency
fs = 1000 # [Hz] Sampling Frequency

# Using SciPy's signal module we can pre-process our data e.g. performing
# decimation, trend removal and filtering. 
# Detrend and decimate
data = signal.detrend(data, axis=0) # Trend rmoval
q = 10 # Decimation factor
data = signal.decimate(data,  q, ftype='fir', axis=0) # Decimation
fs = fs/q # [Hz] Decimated sampling frequency

# ======== ANALYSIS ===========================================================
# Run SSI
br = 260
SSIdat,Result = oma.SSIdatStaDiag(data, fs, br, ordmax=100)

# Frequencies ccoming from the stability 
FreQ = [1.74759, 5.18481, 8.11724, 10.3021, 11.6623]

# Extract the modal properties
Res_SSIdat = oma.SSIModEX(FreQ, Result)

# =============================================================================
# Make some plots
# =============================================================================
MS_SSIdat = Res_SSIdat['Mode Shapes'].real


np.save("..\..\data\simulated_data\Modal_par\SSIdatfreq",Res_SSIdat["Frequencies"])
np.save("..\..\data\simulated_data\Modal_par\SSIdatmodes",MS_SSIdat)
np.save("..\..\data\simulated_data\Modal_par\SSIdatdamp",Res_SSIdat["Damping"])

# Grab Currrent Time After Running the Code
end = time.time()
#Subtract Start Time from The End Time
total_time = end - start
print("\n"+ str(total_time))