# import the builtin time module
import time
def cal_fact(n):
    if n == 1:
        return n
    else:
        return n * cal_fact(n-1)
# Grab Currrent Time Before Running the Code
start = time.time()
# Import modules
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import signal
import matplotlib.pyplot as plt

import PyOMA as oma
from matplotlib.backend_bases import MouseButton
from os.path import dirname, join as pjoin
import scipy.io as sio
# Create a figure and a set of subplots


# ======== PRE-PROCESSING =====================================================

#Finding the file
data_dir = pjoin(dirname(sio.__file__), r"C:\Users\Frede\OneDrive - Danmarks Tekniske Universitet\Speciale\Digital-Twin\src\data\simulated_data")



Omega = []
Modes = []
Damp = []
for i in range(100):
    data_sim = pjoin(data_dir, f'{i+1}_sim_data.mat')

    # Loading simulated data instead:
    data = sio.loadmat(data_sim)
    data = np.transpose(data["x"])
    
    
    
    # Sampling frequency
    fs = 1000 # [Hz] Sampling Frequency
    
    # Using SciPy's signal module we can pre-process our data e.g. performing
    # decimation, trend removal and filtering. 
    # Detrend and decimate
    data = signal.detrend(data, axis=0) # Trend rmoval
    q = 5 # Decimation factor
    data = signal.decimate(data,  q, ftype='fir', axis=0) # Decimation
    fs = fs/q # [Hz] Decimated sampling frequency
    
    
    # ======== ANALYSIS ===========================================================
    # Run FDD
    FDD, Result = oma.FDDsvp(data,  fs)
    
    # Finding frequency to plot the FDD
    dt = 1/fs
    N = data.shape[0]
    f = np.transpose(np.linspace(0,N/2,num=115001))*dt
    
    # Define list/array with the peaks identified from the plot
    FreQ = [1.75, 5.18, 8.13, 10.32, 11.65]
    
    # Extract the modal properties 
    Res_EFDD = oma.EFDDmodEX(FreQ, Result, method='EFDD', MAClim=0.8)

    
    MS_EFDD = Res_EFDD['Mode Shapes'].real

    
    Omega = np.append(Omega,Res_EFDD["Frequencies"])
    Modes.append(MS_EFDD)
    Damp = np.append(Damp,Res_EFDD["Damping"])
    print(i)

np.save("..\..\data\simulated_data\Modal_par\FDDfreq",Omega)
np.save("..\..\data\simulated_data\Modal_par\FDDmodes",Modes)
np.save("..\..\data\simulated_data\Modal_par\FDDdamp",Damp)


# Grab Currrent Time After Running the Code
end = time.time()

#Subtract Start Time from The End Time
total_time = end - start
print("\n"+ str(total_time))