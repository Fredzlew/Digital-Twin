# import the builtin time module
import time
def cal_fact(n):
    if n == 1:
        return n
    else:
        return n * cal_fact(n-1)
# Grab Currrent Time Before Running the Code
start = time.time()
# Import modules
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import signal
import matplotlib.pyplot as plt
import PyOMA as oma
from matplotlib.backend_bases import MouseButton
from os.path import dirname, join as pjoin
import scipy.io as sio


# ======== PRE-PROCESSING =====================================================


#Finding the file
data_dir = pjoin(dirname(sio.__file__), r"C:\Users\Frede\OneDrive - Danmarks Tekniske Universitet\Speciale\Digital-Twin\src\data\simulated_data")



Omega = []
Modes = []
Damp = []
for i in range(1):
    data_sim = pjoin(data_dir, f'{i+1}_sim_data.mat')
    # Loading simulated data instead:
    data = sio.loadmat(data_sim)
    data = np.transpose(data["x"])
    
    
    # Sampling frequency
    fs = 1000 # [Hz] Sampling Frequency
    
    # Using SciPy's signal module we can pre-process our data e.g. performing
    # decimation, trend removal and filtering. 
    # Detrend and decimate
    data = signal.detrend(data, axis=0) # Trend rmoval
    q = 2
    # Decimation factor
    data = signal.decimate(data,  q, ftype='fir', axis=0) # Decimation
    fs = fs/q # [Hz] Decimated sampling frequency
    
    # Filter
    sos = signal.butter(75, 14/fs*2, btype='lowpass', output='sos')
    data = signal.sosfiltfilt(sos, data.T) # filtered data
    
    # ======== ANALYSIS ===========================================================
    # Run SSI
    br = 260
    SSIcov,Result = oma.SSIcovStaDiag(data.T, fs, br, ordmax=100)
    
    # Frequencies ccoming from the stability diagram
    FreQ = [1.74726, 5.18409, 8.11932, 10.2961, 11.6574]
    
    # Extract the modal properties
    Res_SSIcov = oma.SSIModEX(FreQ, Result)
    
    # =============================================================================
    # Make some plots
    # =============================================================================
    MS_SSIcov = Res_SSIcov['Mode Shapes'].real
    
    Omega = np.append(Omega,Res_SSIcov["Frequencies"])
    Modes.append(MS_SSIcov)
    Damp = np.append(Damp,Res_SSIcov["Damping"])
    print(i)
    
np.save("..\..\data\simulated_data\Modal_par\SSIcovfreq",Omega)
np.save("..\..\data\simulated_data\Modal_par\SSIcovmodes",Modes)
np.save("..\..\data\simulated_data\Modal_par\SSIcovdamp",Damp)
#np.save(f"data\Modal_parameters\{i+1}_stab",Result['Reduced Poles'])
# Grab Currrent Time After Running the Code
end = time.time()

#Subtract Start Time from The End Time
total_time = end - start
print("\n"+ str(total_time))
