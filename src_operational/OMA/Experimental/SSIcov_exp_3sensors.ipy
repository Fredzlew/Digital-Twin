# import the builtin time module
import time
def cal_fact(n):
    if n == 1:
        return n
    else:
        return n * cal_fact(n-1)
# Grab Currrent Time Before Running the Code
start = time.time()
# Import modules
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import signal
import matplotlib.pyplot as plt
import PyOMA as oma
from matplotlib.backend_bases import MouseButton
from os.path import dirname, join as pjoin
import scipy.io as sio

%matplotlib qt

# ======== PRE-PROCESSING =====================================================

# To open a .txt file create a variable containing the path to the file
# ======== PRE-PROCESSING =====================================================
dataset = float(input('Which data set (1 (data_5_2_1)? and 2 (data_nodamp)? '))
# To open a .txt file create a variable containing the path to the file
if dataset == 1:
    _file = r"C:\Users\Frede\Speciale\Digital-Twin\src_operational\data\experimental_data\data_5_2_1.txt" # Path to the txt file

elif dataset == 2:
    _file = r"C:\Users\Frede\Speciale\Digital-Twin\src_operational\data\experimental_data\data.txt" # Path to the txt file


# open the file with pandas and create a dataframe
# N.B. whatchout for header, separator and remove time column if present

data = pd.read_csv(_file, header=0, delim_whitespace=True, index_col=False) 
data = data.to_numpy()

data = data[:,[0,1,2,3,4,5,6]]

# Swap the sensors because the sensor 1 is at the top
data = np.flip(data,1)

# remove all other columns
data = data[:,[2,3,5]]


# Sampling frequency
fs = 100 # [Hz] Sampling Frequency

# Using SciPy's signal module we can pre-process our data e.g. performing
# decimation, trend removal and filtering. 
# Detrend and decimate
data = signal.detrend(data, axis=0) # Trend rmoval
q = 2 # Decimation factor
data = signal.decimate(data,  q, ftype='fir', axis=0) # Decimation
fs = fs/q # [Hz] Decimated sampling frequency

# Filter
sos = signal.butter(4, 14/fs*2, btype='lowpass', output='sos')
filtdata = signal.sosfiltfilt(sos, data.T) # filtered data

# ======== ANALYSIS ===========================================================
# Run SSI
br = 350
SSIcov,Result = oma.SSIcovStaDiag(filtdata.T, fs, br, ordmax=100)

# Frequencies ccoming from the stability diagram
if dataset == 1:
    # Anela data_5_2_1
    FreQ = [1.65598 , 5.0244, 7.8989, 10.1127, 11.5872]

elif dataset == 2:
    # Anela data
    FreQ = [1.65586 , 5.02282, 7.89718, 10.1111, 11.5861] #, 10.1111, 11.5861]

# Extract the modal properties
Res_SSIcov = oma.SSIModEX(FreQ, Result)

# =============================================================================
# Make some plots
# =============================================================================
MS_SSIcov2 = Res_SSIcov['Mode Shapes'].real

MS_SSIcov = np.empty((3,5))
for x in range(5):
    for i in range(3):
        MS_SSIcov[i,x] = MS_SSIcov2[i,x]/MS_SSIcov2[2,x]

# Saving the parameters
if dataset == 1:
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIfreq_5_2_1",Res_SSIcov["Frequencies"])
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSImodes_5_2_1",MS_SSIcov)
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIdamp_5_2_1",Res_SSIcov["Damping"])
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIstab_5_2_1",Result['Reduced Poles'])

elif dataset == 2:
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIfreq_no_damp",Res_SSIcov["Frequencies"])
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSImodes_no_damp",MS_SSIcov)
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIdamp_no_damp",Res_SSIcov["Damping"])
    np.save("..\..\data\experimental_data\Modal_par_3_sensors\SSIstab_no_damp",Result['Reduced Poles'])

# Grab Currrent Time After Running the Code
end = time.time()

#Subtract Start Time from The End Time
total_time = end - start
print("\n"+ str(total_time))
